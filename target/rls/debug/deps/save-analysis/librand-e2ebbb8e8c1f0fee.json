{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2","program":"C:\\Users\\Max\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","rand","C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"getrandom_package\"","--cfg","feature=\"rand_chacha\"","--cfg","feature=\"rand_core\"","--cfg","feature=\"std\"","-C","metadata=e2ebbb8e8c1f0fee","-C","extra-filename=-e2ebbb8e8c1f0fee","--out-dir","f:\\Dev\\card-game\\target\\rls\\debug\\deps","-L","dependency=f:\\Dev\\card-game\\target\\rls\\debug\\deps","--extern","getrandom_package=f:\\Dev\\card-game\\target\\rls\\debug\\deps\\libgetrandom-80a77ca7f18e97ef.rmeta","--extern","rand_chacha=f:\\Dev\\card-game\\target\\rls\\debug\\deps\\librand_chacha-44d76ec9005677c7.rmeta","--extern","rand_core=f:\\Dev\\card-game\\target\\rls\\debug\\deps\\librand_core-e642c54a1c3335e2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Max\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"f:\\Dev\\card-game\\target\\rls\\debug\\deps\\librand-e2ebbb8e8c1f0fee.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[12663912890615991261,9295348204875401686]},"crate_root":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src","external_crates":[{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13454279496936976369,256594374343364064]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","num":2,"id":{"name":"core","disambiguator":[10635428080862470944,4053010167158610789]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2397070696586021034,1787692942867494326]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13215350897914660053,4762041400992555299]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8309206586370028958,10530789326598529563]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12844497061290288730,1165546255938205329]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17370511097861102976,8088456066398622915]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":8,"id":{"name":"hashbrown","disambiguator":[1985867887572050615,3717448080532913995]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":9,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10045986561377339069,14963295625130836827]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14681916437073319406,9740076823699971540]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":11,"id":{"name":"panic_unwind","disambiguator":[4514194809136982995,14217700833302823945]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":12,"id":{"name":"rand_core","disambiguator":[1161444700113183401,2474399791881068600]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":13,"id":{"name":"getrandom","disambiguator":[2350525192613569714,17339091387674003507]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","num":14,"id":{"name":"cfg_if","disambiguator":[17609094326070214559,12148578746736033571]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","num":15,"id":{"name":"rand_chacha","disambiguator":[6372687330398483582,9156617943222962591]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","num":16,"id":{"name":"c2_chacha","disambiguator":[13721926921508732165,15336125724968301724]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","num":17,"id":{"name":"lazy_static","disambiguator":[16261492933865803796,5931020966256142023]}},{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","num":18,"id":{"name":"ppv_lite86","disambiguator":[2274506705240552011,6324465432573311202]}}],"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":408,"byte_end":22468,"line_start":10,"line_end":717,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":12,"index":150},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":2798,"byte_end":2805,"line_start":92,"line_end":92,"column_start":21,"column_end":28},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":12,"index":155},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":2807,"byte_end":2816,"line_start":92,"line_end":92,"column_start":30,"column_end":39},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":12,"index":156},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":2818,"byte_end":2829,"line_start":92,"line_end":92,"column_start":41,"column_end":52},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":12,"index":20},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":2831,"byte_end":2836,"line_start":92,"line_end":92,"column_start":54,"column_end":59},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":2909,"byte_end":2919,"line_start":95,"line_end":95,"column_start":52,"column_end":62},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1599},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27315,"byte_end":27327,"line_start":107,"line_end":107,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27367,"byte_end":27374,"line_start":108,"line_end":108,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1523},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27398,"byte_end":27410,"line_start":109,"line_end":109,"column_start":23,"column_end":35},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27412,"byte_end":27418,"line_start":109,"line_end":109,"column_start":37,"column_end":43},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27447,"byte_end":27456,"line_start":110,"line_end":110,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27458,"byte_end":27472,"line_start":110,"line_end":110,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27524,"byte_end":27537,"line_start":111,"line_end":111,"column_start":50,"column_end":63},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1315},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27539,"byte_end":27552,"line_start":111,"line_end":111,"column_start":65,"column_end":78},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27694,"byte_end":27711,"line_start":115,"line_end":115,"column_start":50,"column_end":67},"alias_span":null,"name":"UnitSphereSurface","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1340},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27783,"byte_end":27793,"line_start":117,"line_end":117,"column_start":50,"column_end":60},"alias_span":null,"name":"UnitCircle","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27860,"byte_end":27865,"line_start":119,"line_end":119,"column_start":45,"column_end":50},"alias_span":null,"name":"Gamma","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27867,"byte_end":27877,"line_start":119,"line_end":119,"column_start":52,"column_end":62},"alias_span":null,"name":"ChiSquared","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27879,"byte_end":27886,"line_start":119,"line_end":119,"column_start":64,"column_end":71},"alias_span":null,"name":"FisherF","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27892,"byte_end":27900,"line_start":120,"line_end":120,"column_start":5,"column_end":13},"alias_span":null,"name":"StudentT","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1421},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27902,"byte_end":27906,"line_start":120,"line_end":120,"column_start":15,"column_end":19},"alias_span":null,"name":"Beta","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27975,"byte_end":27981,"line_start":122,"line_end":122,"column_start":46,"column_end":52},"alias_span":null,"name":"Normal","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27983,"byte_end":27992,"line_start":122,"line_end":122,"column_start":54,"column_end":63},"alias_span":null,"name":"LogNormal","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":27994,"byte_end":28008,"line_start":122,"line_end":122,"column_start":65,"column_end":79},"alias_span":null,"name":"StandardNormal","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1458},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28082,"byte_end":28085,"line_start":124,"line_end":124,"column_start":51,"column_end":54},"alias_span":null,"name":"Exp","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28087,"byte_end":28091,"line_start":124,"line_end":124,"column_start":56,"column_end":60},"alias_span":null,"name":"Exp1","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1465},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28159,"byte_end":28165,"line_start":126,"line_end":126,"column_start":45,"column_end":51},"alias_span":null,"name":"Pareto","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28233,"byte_end":28240,"line_start":128,"line_end":128,"column_start":46,"column_end":53},"alias_span":null,"name":"Poisson","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28309,"byte_end":28317,"line_start":130,"line_end":130,"column_start":47,"column_end":55},"alias_span":null,"name":"Binomial","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1492},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28384,"byte_end":28390,"line_start":132,"line_end":132,"column_start":45,"column_end":51},"alias_span":null,"name":"Cauchy","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1500},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28460,"byte_end":28469,"line_start":134,"line_end":134,"column_start":48,"column_end":57},"alias_span":null,"name":"Dirichlet","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1506},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28540,"byte_end":28550,"line_start":136,"line_end":136,"column_start":49,"column_end":59},"alias_span":null,"name":"Triangular","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28618,"byte_end":28625,"line_start":138,"line_end":138,"column_start":46,"column_end":53},"alias_span":null,"name":"Weibull","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":29212,"byte_end":29221,"line_start":158,"line_end":158,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":427}},{"kind":"Use","ref_id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254070,"byte_end":254082,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":2028},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254123,"byte_end":254129,"line_start":22,"line_end":22,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":2035},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254269,"byte_end":254278,"line_start":25,"line_end":25,"column_start":62,"column_end":71},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254314,"byte_end":254317,"line_start":26,"line_end":26,"column_start":35,"column_end":38},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":12,"index":150},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254319,"byte_end":254326,"line_start":26,"line_end":26,"column_start":40,"column_end":47},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":12,"index":155},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254328,"byte_end":254337,"line_start":26,"line_end":26,"column_start":49,"column_end":58},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":12,"index":156},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254339,"byte_end":254350,"line_start":26,"line_end":26,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254409,"byte_end":254415,"line_start":27,"line_end":27,"column_start":57,"column_end":63},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254417,"byte_end":254427,"line_start":27,"line_end":27,"column_start":65,"column_end":75},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254469,"byte_end":254480,"line_start":28,"line_end":28,"column_start":40,"column_end":51},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":846},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":254482,"byte_end":254496,"line_start":28,"line_end":28,"column_start":53,"column_end":67},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\mod.rs","byte_start":260743,"byte_end":260750,"line_start":14,"line_end":14,"column_start":44,"column_end":51},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":593}},{"kind":"Use","ref_id":{"krate":0,"index":1991},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\mod.rs","byte_start":260752,"byte_end":260761,"line_start":14,"line_end":14,"column_start":53,"column_end":62},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":593}},{"kind":"Use","ref_id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\mod.rs","byte_start":260789,"byte_end":260801,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":593}},{"kind":"Use","ref_id":{"krate":0,"index":2017},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mod.rs","byte_start":260048,"byte_end":260058,"line_start":112,"line_end":112,"column_start":46,"column_end":56},"alias_span":null,"name":"EntropyRng","value":"","parent":{"krate":0,"index":592}},{"kind":"Use","ref_id":{"krate":0,"index":2028},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mod.rs","byte_start":260139,"byte_end":260145,"line_start":116,"line_end":116,"column_start":20,"column_end":26},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":592}},{"kind":"Use","ref_id":{"krate":0,"index":2035},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mod.rs","byte_start":260191,"byte_end":260200,"line_start":117,"line_end":117,"column_start":45,"column_end":54},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":592}},{"kind":"Use","ref_id":{"krate":12,"index":210},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mod.rs","byte_start":260250,"byte_end":260255,"line_start":119,"line_end":119,"column_start":48,"column_end":53},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":592}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":408,"byte_end":22468,"line_start":10,"line_end":717,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":577},{"krate":0,"index":592},{"krate":0,"index":747},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":908},{"krate":0,"index":912},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":2101},{"krate":0,"index":2104},{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2113},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2122},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2140},{"krate":0,"index":2143},{"krate":0,"index":2146},{"krate":0,"index":2149},{"krate":0,"index":2152},{"krate":0,"index":2155},{"krate":0,"index":940},{"krate":0,"index":2158},{"krate":0,"index":2163},{"krate":0,"index":2168},{"krate":0,"index":2173},{"krate":0,"index":2178},{"krate":0,"index":2183},{"krate":0,"index":2188},{"krate":0,"index":2193},{"krate":0,"index":2198},{"krate":0,"index":2203},{"krate":0,"index":2208},{"krate":0,"index":2213},{"krate":0,"index":2218},{"krate":0,"index":2223},{"krate":0,"index":2228},{"krate":0,"index":2233},{"krate":0,"index":2238},{"krate":0,"index":2243},{"krate":0,"index":2248},{"krate":0,"index":2253},{"krate":0,"index":2258},{"krate":0,"index":2263},{"krate":0,"index":2268},{"krate":0,"index":2273},{"krate":0,"index":2278},{"krate":0,"index":2283},{"krate":0,"index":2288},{"krate":0,"index":2293},{"krate":0,"index":2298},{"krate":0,"index":2303},{"krate":0,"index":2308},{"krate":0,"index":2313},{"krate":0,"index":2318},{"krate":0,"index":2323},{"krate":0,"index":2328},{"krate":0,"index":2333},{"krate":0,"index":2338},{"krate":0,"index":2343},{"krate":0,"index":2348},{"krate":0,"index":2353},{"krate":0,"index":941}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":1734,"byte_end":1756,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":1757,"byte_end":1796,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"allow(clippy::excessive_precision,\n        clippy::unreadable_literal,\n        clippy::float_cmp)","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":1980,"byte_end":2065,"line_start":55,"line_end":55,"column_start":1,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":45},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":128},{"krate":0,"index":139},{"krate":0,"index":231},{"krate":0,"index":243},{"krate":0,"index":255},{"krate":0,"index":299},{"krate":0,"index":322},{"krate":0,"index":340},{"krate":0,"index":350},{"krate":0,"index":361},{"krate":0,"index":376},{"krate":0,"index":385},{"krate":0,"index":396},{"krate":0,"index":406},{"krate":0,"index":416},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":462},{"krate":0,"index":495},{"krate":0,"index":541},{"krate":0,"index":554},{"krate":0,"index":560},{"krate":0,"index":1966},{"krate":0,"index":1973},{"krate":0,"index":566},{"krate":0,"index":573},{"krate":0,"index":1978},{"krate":0,"index":1983},{"krate":0,"index":1982},{"krate":0,"index":1980}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":943},{"krate":0,"index":952},{"krate":0,"index":950},{"krate":0,"index":947},{"krate":0,"index":69},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":955},{"krate":0,"index":965},{"krate":0,"index":963},{"krate":0,"index":960},{"krate":0,"index":113},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":1000},{"krate":0,"index":1002},{"krate":0,"index":1016},{"krate":0,"index":1018},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1144},{"krate":0,"index":1146},{"krate":0,"index":1160},{"krate":0,"index":1169},{"krate":0,"index":1167},{"krate":0,"index":1164},{"krate":0,"index":114},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1204},{"krate":0,"index":1210},{"krate":0,"index":1209},{"krate":0,"index":1207},{"krate":0,"index":1212},{"krate":0,"index":1225},{"krate":0,"index":1224},{"krate":0,"index":1222},{"krate":0,"index":115},{"krate":0,"index":117}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":43991,"byte_end":43998,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":43980,"byte_end":44029,"line_start":165,"line_end":165,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":44234,"byte_end":44237,"line_start":170,"line_end":170,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":44577,"byte_end":44590,"line_start":179,"line_end":179,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":45237,"byte_end":45250,"line_start":200,"line_end":200,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":82}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":45334,"byte_end":45341,"line_start":202,"line_end":202,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":45816,"byte_end":45830,"line_start":215,"line_end":215,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":93}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":45898,"byte_end":45899,"line_start":217,"line_end":217,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":46162,"byte_end":46165,"line_start":224,"line_end":224,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":46540,"byte_end":46553,"line_start":233,"line_end":233,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":46719,"byte_end":46725,"line_start":238,"line_end":238,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"fn <R> (&self, rng: &mut R) -> Self::X","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":47700,"byte_end":47713,"line_start":259,"line_end":259,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"fn <R, B1, B2> (low: B1, high: B2, rng: &mut R) -> Self::X","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":48564,"byte_end":48576,"line_start":286,"line_end":286,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":105}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":48730,"byte_end":48736,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":103},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":51133,"byte_end":51143,"line_start":341,"line_end":341,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":51122,"byte_end":51249,"line_start":341,"line_end":345,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1160},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":63114,"byte_end":63126,"line_start":637,"line_end":637,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":63103,"byte_end":63159,"line_start":637,"line_end":640,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1204},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":71065,"byte_end":71080,"line_start":819,"line_end":819,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":71054,"byte_end":71132,"line_start":819,"line_end":822,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":90531,"byte_end":90540,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":1228}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":90520,"byte_end":90625,"line_start":34,"line_end":37,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":92013,"byte_end":92031,"line_start":68,"line_end":68,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":91964,"byte_end":91978,"line_start":66,"line_end":66,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"BernoulliError::{InvalidProbability}","parent":null,"children":[{"krate":0,"index":1235}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":91955,"byte_end":92034,"line_start":66,"line_end":69,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":91955,"byte_end":92034,"line_start":66,"line_end":69,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":92576,"byte_end":92579,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"fn (p: f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":92555,"byte_end":92564,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":93271,"byte_end":93281,"line_start":98,"line_end":98,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"fn (numerator: u32, denominator: u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":93250,"byte_end":93259,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":1304},{"krate":0,"index":1312},{"krate":0,"index":1309},{"krate":0,"index":210},{"krate":0,"index":218},{"krate":0,"index":1315},{"krate":0,"index":1331},{"krate":0,"index":1329},{"krate":0,"index":1328},{"krate":0,"index":1326},{"krate":0,"index":1324},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":229}],"decl_id":null,"docs":" Weighted index sampling\n \n This module provides two implementations for sampling indices:\n \n *   [`WeightedIndex`] allows `O(log N)` sampling\n *   [`alias_method::WeightedIndex`] allows `O(1)` sampling, but with\n      much greater set-up cost\n      \n [`alias_method::WeightedIndex`]: alias_method/struct.WeightedIndex.html\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28660,"byte_end":28683,"line_start":142,"line_end":142,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":163},{"krate":0,"index":181},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":1246},{"krate":0,"index":1251},{"krate":0,"index":1256},{"krate":0,"index":1260},{"krate":0,"index":1264},{"krate":0,"index":1268},{"krate":0,"index":1272},{"krate":0,"index":1276},{"krate":0,"index":1280},{"krate":0,"index":1284},{"krate":0,"index":1288},{"krate":0,"index":1292},{"krate":0,"index":1296},{"krate":0,"index":1300}],"decl_id":null,"docs":" This module contains an implementation of alias method for sampling random\n indices with probabilities proportional to a collection of weights.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":112831,"byte_end":112844,"line_start":64,"line_end":64,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected item.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":113327,"byte_end":113330,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"fn (weights: Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`WeightedIndex`].","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":119904,"byte_end":119910,"line_start":272,"line_end":272,"column_start":11,"column_end":17},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight: Sized + Copy + SampleUniform + PartialOrd + Add<Output = Self> + AddAssign +\nSub<Output = Self> + SubAssign + Mul<Output = Self> + MulAssign + Div<Output =\nSelf> + DivAssign + Sum","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195}],"decl_id":null,"docs":" Trait that must be implemented for weights, that are used with\n [`WeightedIndex`]. Currently no guarantees on the correctness of\n [`WeightedIndex`] are given for custom implementations of this trait.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120204,"byte_end":120207,"line_start":288,"line_end":288,"column_start":11,"column_end":14},"name":"MAX","qualname":"::distributions::weighted::alias_method::Weight::MAX","value":"Self","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" Maximum number representable by `Self`.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120269,"byte_end":120273,"line_start":291,"line_end":291,"column_start":11,"column_end":15},"name":"ZERO","qualname":"::distributions::weighted::alias_method::Weight::ZERO","value":"Self","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" Element of `Self` equivalent to 0.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120470,"byte_end":120488,"line_start":296,"line_end":296,"column_start":8,"column_end":26},"name":"try_from_u32_lossy","qualname":"::distributions::weighted::alias_method::Weight::try_from_u32_lossy","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" Produce an instance of `Self` from a `u32` value, or return `None` if\n out of range. Loss of precision (where `Self` is a floating point type)\n is acceptable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120565,"byte_end":120568,"line_start":299,"line_end":299,"column_start":8,"column_end":11},"name":"sum","qualname":"::distributions::weighted::alias_method::Weight::sum","value":"fn (values: &[Self]) -> Self","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" Sums all values in slice `values`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":99161,"byte_end":99174,"line_start":85,"line_end":85,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308}],"decl_id":null,"docs":" A distribution using weighted sampling to pick a discretely selected\n item.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":99748,"byte_end":99751,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"fn <I> (weights: I) -> Result<WeightedIndex<X>, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":101391,"byte_end":101405,"line_start":143,"line_end":143,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"fn (&mut self, new_weights: &[(usize, &X)]) -> Result<(), WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109258,"byte_end":109264,"line_start":354,"line_end":354,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1318},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109379,"byte_end":109392,"line_start":358,"line_end":358,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum or\n otherwise invalid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109461,"byte_end":109475,"line_start":361,"line_end":361,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1322},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109557,"byte_end":109564,"line_start":364,"line_end":364,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":1315},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1315},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109180,"byte_end":109193,"line_start":352,"line_end":352,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted::WeightedError","value":"WeightedError::{NoItem, InvalidWeight, AllWeightsZero, TooMany}","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1322}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109171,"byte_end":109567,"line_start":352,"line_end":365,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109171,"byte_end":109567,"line_start":352,"line_end":365,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1333},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128327,"byte_end":128344,"line_start":24,"line_end":24,"column_start":12,"column_end":29},"name":"UnitSphereSurface","qualname":"::distributions::unit_sphere::UnitSphereSurface","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the surface of the unit sphere in three dimensions.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128223,"byte_end":128285,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128316,"byte_end":128345,"line_start":24,"line_end":24,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128455,"byte_end":128458,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitSphereSurface>::new","value":"fn () -> UnitSphereSurface","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitSphereSurface` distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128434,"byte_end":128443,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1340},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131548,"byte_end":131558,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"UnitCircle","qualname":"::distributions::unit_circle::UnitCircle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples uniformly from the edge of the unit circle in two dimensions.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131444,"byte_end":131506,"line_start":23,"line_end":23,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131537,"byte_end":131559,"line_start":25,"line_end":25,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131655,"byte_end":131658,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitCircle>::new","value":"fn () -> UnitCircle","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitCircle` distribution.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131634,"byte_end":131643,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1347},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":135233,"byte_end":135238,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"Gamma","qualname":"::distributions::gamma::Gamma","value":"Gamma {  }","parent":null,"children":[{"krate":0,"index":1348}],"decl_id":null,"docs":" The Gamma distribution `Gamma(shape, scale)` distribution.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":135129,"byte_end":135191,"line_start":40,"line_end":40,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":135222,"byte_end":135263,"line_start":42,"line_end":44,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":136523,"byte_end":136526,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Gamma>::new","value":"fn (shape: f64, scale: f64) -> Gamma","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Gamma(shape, scale)`\n distribution.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":136502,"byte_end":136511,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":138968,"byte_end":138978,"line_start":171,"line_end":171,"column_start":12,"column_end":22},"name":"ChiSquared","qualname":"::distributions::gamma::ChiSquared","value":"ChiSquared {  }","parent":null,"children":[{"krate":0,"index":1387}],"decl_id":null,"docs":" The chi-squared distribution `χ²(k)`, where `k` is the degrees of\n freedom.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":138864,"byte_end":138926,"line_start":169,"line_end":169,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":138957,"byte_end":139008,"line_start":171,"line_end":173,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":139444,"byte_end":139447,"line_start":187,"line_end":187,"column_start":12,"column_end":15},"name":"new","qualname":"<ChiSquared>::new","value":"fn (k: f64) -> ChiSquared","parent":null,"children":[],"decl_id":null,"docs":" Create a new chi-squared distribution with degrees-of-freedom\n `k`. Panics if `k < 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":140379,"byte_end":140386,"line_start":217,"line_end":217,"column_start":12,"column_end":19},"name":"FisherF","qualname":"::distributions::gamma::FisherF","value":"FisherF {  }","parent":null,"children":[{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407}],"decl_id":null,"docs":" The Fisher F distribution `F(m, n)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":140275,"byte_end":140337,"line_start":215,"line_end":215,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":140368,"byte_end":140568,"line_start":217,"line_end":223,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":140721,"byte_end":140724,"line_start":228,"line_end":228,"column_start":12,"column_end":15},"name":"new","qualname":"<FisherF>::new","value":"fn (m: f64, n: f64) -> FisherF","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FisherF` distribution, with the given\n parameter. Panics if either `m` or `n` are not positive.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141388,"byte_end":141396,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"name":"StudentT","qualname":"::distributions::gamma::StudentT","value":"StudentT {  }","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415}],"decl_id":null,"docs":" The Student t distribution, `t(nu)`, where `nu` is the degrees of\n freedom.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141284,"byte_end":141346,"line_start":247,"line_end":247,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141377,"byte_end":141434,"line_start":249,"line_end":252,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141564,"byte_end":141567,"line_start":257,"line_end":257,"column_start":12,"column_end":15},"name":"new","qualname":"<StudentT>::new","value":"fn (n: f64) -> StudentT","parent":null,"children":[],"decl_id":null,"docs":" Create a new Student t distribution with `n` degrees of\n freedom. Panics if `n <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1421},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":142129,"byte_end":142133,"line_start":275,"line_end":275,"column_start":12,"column_end":16},"name":"Beta","qualname":"::distributions::gamma::Beta","value":"Beta {  }","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1423}],"decl_id":null,"docs":" The Beta distribution with shape parameters `alpha` and `beta`.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":142025,"byte_end":142087,"line_start":273,"line_end":273,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":142118,"byte_end":142177,"line_start":275,"line_end":278,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":142345,"byte_end":142348,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"name":"new","qualname":"<Beta>::new","value":"fn (alpha: f64, beta: f64) -> Beta","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Beta(alpha, beta)`\n distribution.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":145523,"byte_end":145537,"line_start":31,"line_end":31,"column_start":12,"column_end":26},"name":"StandardNormal","qualname":"::distributions::normal::StandardNormal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the normal distribution\n `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to\n `Normal::new(0.0, 1.0)` but faster.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":145419,"byte_end":145481,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":145512,"byte_end":145538,"line_start":31,"line_end":31,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1436},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147146,"byte_end":147152,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"Normal","qualname":"::distributions::normal::Normal","value":"Normal {  }","parent":null,"children":[{"krate":0,"index":1437},{"krate":0,"index":1438}],"decl_id":null,"docs":" The normal distribution `N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147042,"byte_end":147104,"line_start":77,"line_end":77,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147135,"byte_end":147189,"line_start":79,"line_end":82,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147394,"byte_end":147397,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<Normal>::new","value":"fn (mean: f64, std_dev: f64) -> Normal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Normal` distribution with the given mean and\n standard deviation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147373,"byte_end":147382,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":148028,"byte_end":148037,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"LogNormal","qualname":"::distributions::normal::LogNormal","value":"LogNormal {  }","parent":null,"children":[{"krate":0,"index":1445}],"decl_id":null,"docs":" The log-normal distribution `ln N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147924,"byte_end":147986,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":148017,"byte_end":148058,"line_start":114,"line_end":116,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":148269,"byte_end":148272,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<LogNormal>::new","value":"fn (mean: f64, std_dev: f64) -> LogNormal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LogNormal` distribution with the given mean\n and standard deviation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":148248,"byte_end":148257,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":150696,"byte_end":150700,"line_start":33,"line_end":33,"column_start":12,"column_end":16},"name":"Exp1","qualname":"::distributions::exponential::Exp1","value":"","parent":null,"children":[],"decl_id":null,"docs":" Samples floating-point numbers according to the exponential distribution,\n with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or\n sampling with `-rng.gen::<f64>().ln()`, but faster.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":150592,"byte_end":150654,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":150685,"byte_end":150701,"line_start":33,"line_end":33,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1458},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":151646,"byte_end":151649,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"Exp","qualname":"::distributions::exponential::Exp","value":"Exp {  }","parent":null,"children":[{"krate":0,"index":1459}],"decl_id":null,"docs":" The exponential distribution `Exp(lambda)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":151542,"byte_end":151604,"line_start":61,"line_end":61,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":151635,"byte_end":151748,"line_start":63,"line_end":66,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":151890,"byte_end":151893,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<Exp>::new","value":"fn (lambda: f64) -> Exp","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Exp` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":151869,"byte_end":151878,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1465},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\pareto.rs","byte_start":153368,"byte_end":153374,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Pareto","qualname":"::distributions::pareto::Pareto","value":"Pareto {  }","parent":null,"children":[{"krate":0,"index":1466},{"krate":0,"index":1467}],"decl_id":null,"docs":" Samples floating-point numbers according to the Pareto distribution\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\pareto.rs","byte_start":153264,"byte_end":153326,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\pareto.rs","byte_start":153357,"byte_end":153418,"line_start":18,"line_end":21,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\pareto.rs","byte_start":153745,"byte_end":153748,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<Pareto>::new","value":"fn (scale: f64, shape: f64) -> Pareto","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Pareto distribution with given `scale` and `shape`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\poisson.rs","byte_start":155389,"byte_end":155396,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Poisson","qualname":"::distributions::poisson::Poisson","value":"Poisson {  }","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478}],"decl_id":null,"docs":" The Poisson distribution `Poisson(lambda)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\poisson.rs","byte_start":155285,"byte_end":155347,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\poisson.rs","byte_start":155378,"byte_end":155530,"line_start":23,"line_end":30,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\poisson.rs","byte_start":155666,"byte_end":155669,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Poisson>::new","value":"fn (lambda: f64) -> Poisson","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Poisson` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1484},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\binomial.rs","byte_start":160505,"byte_end":160513,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"Binomial","qualname":"::distributions::binomial::Binomial","value":"Binomial {  }","parent":null,"children":[{"krate":0,"index":1485},{"krate":0,"index":1486}],"decl_id":null,"docs":" The binomial distribution `Binomial(n, p)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\binomial.rs","byte_start":160401,"byte_end":160463,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\binomial.rs","byte_start":160494,"byte_end":160599,"line_start":23,"line_end":28,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\binomial.rs","byte_start":160806,"byte_end":160809,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Binomial>::new","value":"fn (n: u64, p: f64) -> Binomial","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Binomial` with the given shape parameters `n` (number\n of trials) and `p` (probability of success).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1492},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\cauchy.rs","byte_start":171720,"byte_end":171726,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Cauchy","qualname":"::distributions::cauchy::Cauchy","value":"Cauchy {  }","parent":null,"children":[{"krate":0,"index":1493},{"krate":0,"index":1494}],"decl_id":null,"docs":" The Cauchy distribution `Cauchy(median, scale)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\cauchy.rs","byte_start":171616,"byte_end":171678,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\cauchy.rs","byte_start":171709,"byte_end":171762,"line_start":24,"line_end":27,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\cauchy.rs","byte_start":171951,"byte_end":171954,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Cauchy>::new","value":"fn (median: f64, scale: f64) -> Cauchy","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Cauchy` with the given shape parameters\n `median` the peak location and `scale` the scale factor.\n Panics if `scale <= 0`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1500},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175066,"byte_end":175075,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"name":"Dirichlet","qualname":"::distributions::dirichlet::Dirichlet","value":"Dirichlet {  }","parent":null,"children":[{"krate":0,"index":1501}],"decl_id":null,"docs":" The dirichelet distribution `Dirichlet(alpha)`.","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":174968,"byte_end":175030,"line_start":23,"line_end":23,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175325,"byte_end":175328,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<Dirichlet>::new","value":"fn <V> (alpha: V) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given alpha parameter `alpha`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175304,"byte_end":175313,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175742,"byte_end":175756,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"name":"new_with_param","qualname":"<Dirichlet>::new_with_param","value":"fn (alpha: f64, size: usize) -> Dirichlet","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Dirichlet` with the given shape parameter `alpha` and `size`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175721,"byte_end":175730,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1506},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178176,"byte_end":178186,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"Triangular","qualname":"::distributions::triangular::Triangular","value":"Triangular {  }","parent":null,"children":[{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509}],"decl_id":null,"docs":" The triangular distribution.\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178072,"byte_end":178134,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178165,"byte_end":178233,"line_start":18,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178470,"byte_end":178473,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Triangular>::new","value":"fn (min: f64, max: f64, mode: f64) -> Triangular","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Triangular` with minimum `min`, maximum `max` and mode\n `mode`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178449,"byte_end":178458,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1515},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weibull.rs","byte_start":180447,"byte_end":180454,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Weibull","qualname":"::distributions::weibull::Weibull","value":"Weibull {  }","parent":null,"children":[{"krate":0,"index":1516},{"krate":0,"index":1517}],"decl_id":null,"docs":" Samples floating-point numbers according to the Weibull distribution\n","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weibull.rs","byte_start":180343,"byte_end":180405,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weibull.rs","byte_start":180436,"byte_end":180494,"line_start":18,"line_end":21,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weibull.rs","byte_start":180696,"byte_end":180699,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Weibull>::new","value":"fn (scale: f64, shape: f64) -> Weibull","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Weibull` distribution with given `scale` and `shape`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1523},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\float.rs","byte_start":183049,"byte_end":183061,"line_start":43,"line_end":43,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\float.rs","byte_start":183038,"byte_end":183062,"line_start":43,"line_end":43,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1530},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\float.rs","byte_start":183992,"byte_end":183998,"line_start":69,"line_end":69,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\float.rs","byte_start":183981,"byte_end":183999,"line_start":69,"line_end":69,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\float.rs","byte_start":184108,"byte_end":184117,"line_start":74,"line_end":74,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\float.rs","byte_start":184129,"byte_end":184130,"line_start":75,"line_end":75,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":423},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\float.rs","byte_start":184532,"byte_end":184556,"line_start":85,"line_end":85,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"fn (self, exponent: i32) -> Self::F","parent":{"krate":0,"index":423},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":29170,"byte_end":29183,"line_start":157,"line_end":157,"column_start":24,"column_end":37},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":428}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1599},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":203548,"byte_end":203560,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `char`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.\n \n # Example","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\utils.rs","byte_start":211629,"byte_end":211635,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\utils.rs","byte_start":218898,"byte_end":218902,"line_start":233,"line_end":233,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":505},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\utils.rs","byte_start":219417,"byte_end":219421,"line_start":245,"line_end":245,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":505},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":30349,"byte_end":30361,"line_start":183,"line_end":183,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":558}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":30455,"byte_end":30461,"line_start":185,"line_end":185,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"fn <R> (&self, rng: &mut R) -> T","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":31668,"byte_end":31679,"line_start":217,"line_end":217,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"fn <R> (self, rng: R) -> DistIter<Self, R, T>","parent":{"krate":0,"index":554},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1966},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":32360,"byte_end":32368,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":36516,"byte_end":36524,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":36505,"byte_end":36525,"line_start":353,"line_end":353,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":586},{"krate":0,"index":589}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mod.rs","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":674},{"krate":0,"index":690},{"krate":0,"index":702},{"krate":0,"index":721},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":593},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":616},{"krate":0,"index":670},{"krate":0,"index":673}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":262287,"byte_end":262294,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":1987}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":262401,"byte_end":262404,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"fn (r: R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1991},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":263233,"byte_end":263242,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":268183,"byte_end":268195,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":268694,"byte_end":268697,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"fn (rng: R, threshold: u64, reseeder: Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":268882,"byte_end":268888,"line_start":98,"line_end":98,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2017},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278222,"byte_end":278232,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"name":"EntropyRng","qualname":"::rngs::entropy::EntropyRng","value":"EntropyRng {  }","parent":null,"children":[{"krate":0,"index":2018}],"decl_id":null,"docs":" An interface returning random data from external source(s), provided\n specifically for securely seeding algorithmic generators (PRNGs).","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.0\", note = \"use rngs::OsRng instead\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278150,"byte_end":278210,"line_start":23,"line_end":23,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278545,"byte_end":278548,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<EntropyRng>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EntropyRng`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":690},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mock.rs","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":2021},{"krate":0,"index":2026},{"krate":0,"index":2024},{"krate":0,"index":695},{"krate":0,"index":697}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2021},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mock.rs","byte_start":280291,"byte_end":280298,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":2022},{"krate":0,"index":2023}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.\n \n This generates an arithmetic sequence (i.e. adds a constant each step)\n over a `u64` number, using wrapping arithmetic. If the increment is 0\n the generator yields a constant.\n \n ```\n use rand::Rng;\n use rand::rngs::mock::StepRng;\n \n let mut my_rng = StepRng::new(2, 1);\n let sample: [u64; 3] = my_rng.gen();\n assert_eq!(sample, [2, 3, 4]);\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mock.rs","byte_start":280488,"byte_end":280491,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"fn (initial: u64, increment: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2028},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","byte_start":282726,"byte_end":282732,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2035},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":286980,"byte_end":286989,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":2036}],"decl_id":null,"docs":" The type returned by [`thread_rng`], essentially just a reference to the\n PRNG in thread-local memory.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":286969,"byte_end":287101,"line_start":57,"line_end":60,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":287879,"byte_end":287889,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"fn () -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":846},{"krate":0,"index":853},{"krate":0,"index":884},{"krate":0,"index":2080},{"krate":0,"index":2087},{"krate":0,"index":886},{"krate":0,"index":894},{"krate":0,"index":899}],"decl_id":null,"docs":" Sequence-related functionality\n \n This module provides:\n \n *   [`seq::SliceRandom`] slice sampling and mutation\n *   [`seq::IteratorRandom`] iterator sampling\n *   [`seq::index::sample`] low-level API to choose multiple indices from\n     `0..length`\n \n Also see:\n \n *   [`distributions::weighted`] module which provides implementations of\n     weighted index sampling.\n \n In order to make results reproducible across 32-64 bit architectures, all\n `usize` indices are sampled as a `u32` where possible (also providing a\n small performance boost in some cases).\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":748},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":753},{"krate":0,"index":757},{"krate":0,"index":2047},{"krate":0,"index":2056},{"krate":0,"index":2054},{"krate":0,"index":758},{"krate":0,"index":766},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":2058},{"krate":0,"index":2066},{"krate":0,"index":775},{"krate":0,"index":782},{"krate":0,"index":2069},{"krate":0,"index":2078},{"krate":0,"index":2076},{"krate":0,"index":784},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":799},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":289843,"byte_end":289866,"line_start":28,"line_end":28,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2048},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":317660,"byte_end":317663,"line_start":27,"line_end":27,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2051},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":317694,"byte_end":317699,"line_start":28,"line_end":28,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2047},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":317630,"byte_end":317638,"line_start":26,"line_end":26,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"IndexVec::{U32, USize}","parent":null,"children":[{"krate":0,"index":2048},{"krate":0,"index":2051}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":317795,"byte_end":317798,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":317774,"byte_end":317783,"line_start":33,"line_end":33,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":318016,"byte_end":318024,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":317995,"byte_end":318004,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":318361,"byte_end":318366,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"fn (&self, index: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":318340,"byte_end":318349,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":318645,"byte_end":318653,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"fn (self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":318624,"byte_end":318633,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":318918,"byte_end":318922,"line_start":73,"line_end":73,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"fn (&self) -> IndexVecIter<'_>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":318897,"byte_end":318906,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":319232,"byte_end":319241,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<IndexVec>::into_iter","value":"fn (self) -> IndexVecIntoIter","parent":null,"children":[],"decl_id":null,"docs":" Convert into an iterator over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":319211,"byte_end":319220,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2060},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320360,"byte_end":320363,"line_start":121,"line_end":121,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter<'a, u32>)","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2063},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320406,"byte_end":320411,"line_start":122,"line_end":122,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter<'a, usize>)","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2058},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320322,"byte_end":320334,"line_start":120,"line_end":120,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"IndexVecIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2060},{"krate":0,"index":2063}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2070},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321142,"byte_end":321145,"line_start":150,"line_end":150,"column_start":20,"column_end":23},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":2069},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2073},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321186,"byte_end":321191,"line_start":151,"line_end":151,"column_start":20,"column_end":25},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":2069},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2069},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321104,"byte_end":321120,"line_start":149,"line_end":149,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"IndexVecIntoIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":2070},{"krate":0,"index":2073}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":322867,"byte_end":322873,"line_start":201,"line_end":201,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"fn <R> (rng: &mut R, length: usize, amount: usize) -> IndexVec","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":290807,"byte_end":290818,"line_start":58,"line_end":58,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":836},{"krate":0,"index":842},{"krate":0,"index":844}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.\n \n This trait is implemented on all `[T]` slice types, providing several\n methods for choosing and shuffling elements. You must `use` this trait:\n \n ```\n use rand::seq::SliceRandom;\n \n fn main() {\n     let mut rng = rand::thread_rng();\n     let mut bytes = \"Hello, random!\".to_string().into_bytes();\n     bytes.shuffle(&mut rng);\n     let str = String::from_utf8(bytes).unwrap();\n     println!(\"{}\", str);\n }\n ```\n Example output (non-deterministic):\n ```none\n l,nmroHado !le\n ```\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":290856,"byte_end":290860,"line_start":60,"line_end":60,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":291347,"byte_end":291353,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"fn <R> (&self, rng: &mut R) -> Option<&Self::Item>","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.\n \n For slices, complexity is `O(1)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":291598,"byte_end":291608,"line_start":85,"line_end":85,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"fn <R> (&mut self, rng: &mut R) -> Option<&mut Self::Item>","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":292643,"byte_end":292658,"line_start":113,"line_end":113,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"fn <R> (&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Item>","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":292610,"byte_end":292635,"line_start":112,"line_end":112,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":293801,"byte_end":293816,"line_start":140,"line_end":140,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"fn <R, F, B, X> (&self, rng: &mut R, weight: F) -> Result<&Self::Item, WeightedError>","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.\n \n The specified function `weight` maps each item `x` to a relative\n likelihood `weight(x)`. The probability of each item being selected is\n therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":293768,"byte_end":293793,"line_start":139,"line_end":139,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":294860,"byte_end":294879,"line_start":167,"line_end":167,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"fn <R, F, B, X> (&mut self, rng: &mut R, weight: F) -> Result<&mut Self::Item, WeightedError>","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.\n \n The specified function `weight` maps each item `x` to a relative\n likelihood `weight(x)`. The probability of each item being selected is\n therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":294827,"byte_end":294852,"line_start":166,"line_end":166,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":295671,"byte_end":295678,"line_start":196,"line_end":196,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"fn <R> (&mut self, rng: &mut R) -> ()","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":296543,"byte_end":296558,"line_start":216,"line_end":216,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"fn <R> (&mut self, rng: &mut R, amount: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":822},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":846},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":297238,"byte_end":297252,"line_start":241,"line_end":241,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":851}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.\n \n This trait is implemented on all sized iterators, providing methods for\n choosing one or more elements. You must `use` this trait:\n \n ```\n use rand::seq::IteratorRandom;\n \n fn main() {\n     let mut rng = rand::thread_rng();\n     \n     let faces = \"😀😎😐😕😠😢\";\n     println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());\n }\n ```\n Example output (non-deterministic):\n ```none\n I am 😀!\n ```\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":297887,"byte_end":297893,"line_start":254,"line_end":254,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"fn <R> (mut self, rng: &mut R) -> Option<Self::Item>","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.\n \n Returns `None` if and only if the iterator is empty.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":299955,"byte_end":299975,"line_start":312,"line_end":312,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"fn <R> (mut self, rng: &mut R, buf: &mut [Self::Item]) -> usize","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":301387,"byte_end":301402,"line_start":351,"line_end":351,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"fn <R> (mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":301354,"byte_end":301379,"line_start":350,"line_end":350,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2080},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":305710,"byte_end":305725,"line_start":486,"line_end":486,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086}],"decl_id":null,"docs":" An iterator over multiple slice elements.\n \n This struct is created by\n [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":305656,"byte_end":305681,"line_start":484,"line_end":484,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":4721,"byte_end":4724,"line_start":146,"line_end":146,"column_start":11,"column_end":14},"name":"Rng","qualname":"::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":915},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":929},{"krate":0,"index":930}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":5874,"byte_end":5877,"line_start":182,"line_end":182,"column_start":8,"column_end":11},"name":"gen","qualname":"::Rng::gen","value":"fn <T> (&mut self) -> T","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":5857,"byte_end":5866,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":6752,"byte_end":6761,"line_start":211,"line_end":211,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::Rng::gen_range","value":"fn <T, B1, B2> (&mut self, low: B1, high: B2) -> T","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`), i.e. inclusive of\n `low` and exclusive of `high`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":7451,"byte_end":7457,"line_start":233,"line_end":233,"column_start":8,"column_end":14},"name":"sample","qualname":"::Rng::sample","value":"fn <T, D> (&mut self, distr: D) -> T","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":8771,"byte_end":8782,"line_start":270,"line_end":270,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::Rng::sample_iter","value":"fn <T, D> (self, distr: D) -> distributions::DistIter<D, Self, T>","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":9802,"byte_end":9806,"line_start":297,"line_end":297,"column_start":8,"column_end":12},"name":"fill","qualname":"::Rng::fill","value":"fn <T> (&mut self, dest: &mut T) -> ()","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":10861,"byte_end":10869,"line_start":329,"line_end":329,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::Rng::try_fill","value":"fn <T> (&mut self, dest: &mut T) -> Result<(), Error>","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random bytes (uniform value distribution),\n where `dest` is any type supporting [`AsByteSliceMut`], namely slices\n and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":11581,"byte_end":11589,"line_start":355,"line_end":355,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::Rng::gen_bool","value":"fn (&mut self, p: f64) -> bool","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":11564,"byte_end":11573,"line_start":354,"line_end":354,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":12576,"byte_end":12585,"line_start":384,"line_end":384,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::Rng::gen_ratio","value":"fn (&mut self, numerator: u32, denominator: u32) -> bool","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":12559,"byte_end":12568,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":933},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":12926,"byte_end":12940,"line_start":395,"line_end":395,"column_start":11,"column_end":25},"name":"AsByteSliceMut","qualname":"::AsByteSliceMut","value":"AsByteSliceMut","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935}],"decl_id":null,"docs":" Trait for casting types to byte slices","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":13009,"byte_end":13026,"line_start":397,"line_end":397,"column_start":8,"column_end":25},"name":"as_byte_slice_mut","qualname":"::AsByteSliceMut::as_byte_slice_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":933},"children":[],"decl_id":null,"docs":" Return a mutable reference to self as a byte slice\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":13139,"byte_end":13144,"line_start":400,"line_end":400,"column_start":8,"column_end":13},"name":"to_le","qualname":"::AsByteSliceMut::to_le","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":933},"children":[],"decl_id":null,"docs":" Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":941},"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":17284,"byte_end":17290,"line_start":545,"line_end":545,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":17245,"byte_end":17266,"line_start":543,"line_end":543,"column_start":1,"column_end":22}},{"value":"inline","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":17267,"byte_end":17276,"line_start":544,"line_end":544,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":44054,"byte_end":44061,"line_start":167,"line_end":167,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":44829,"byte_end":44836,"line_start":187,"line_end":187,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":48045,"byte_end":48052,"line_start":269,"line_end":269,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":48222,"byte_end":48229,"line_start":275,"line_end":275,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":48802,"byte_end":48810,"line_start":292,"line_end":292,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":71426,"byte_end":71434,"line_start":840,"line_end":840,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":71500,"byte_end":71515,"line_start":844,"line_end":844,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":92041,"byte_end":92050,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":93721,"byte_end":93730,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":113003,"byte_end":113016,"line_start":71,"line_end":71,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":115299,"byte_end":115306,"line_start":133,"line_end":133,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":118485,"byte_end":118498,"line_start":229,"line_end":229,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":118872,"byte_end":118885,"line_start":240,"line_end":240,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":119340,"byte_end":119353,"line_start":255,"line_end":255,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":99337,"byte_end":99350,"line_start":91,"line_end":91,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":104219,"byte_end":104232,"line_start":224,"line_end":224,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109574,"byte_end":109587,"line_start":367,"line_end":367,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109982,"byte_end":109995,"line_start":379,"line_end":379,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":110163,"byte_end":110176,"line_start":388,"line_end":388,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128352,"byte_end":128369,"line_start":26,"line_end":26,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128551,"byte_end":128568,"line_start":34,"line_end":34,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131566,"byte_end":131576,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131737,"byte_end":131747,"line_start":35,"line_end":35,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":136345,"byte_end":136350,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":136986,"byte_end":137001,"line_start":105,"line_end":105,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":137219,"byte_end":137234,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":137472,"byte_end":137477,"line_start":125,"line_end":125,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":137738,"byte_end":137753,"line_start":134,"line_end":134,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":137955,"byte_end":137970,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":139318,"byte_end":139328,"line_start":184,"line_end":184,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":139745,"byte_end":139755,"line_start":197,"line_end":197,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":140575,"byte_end":140582,"line_start":225,"line_end":225,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141049,"byte_end":141056,"line_start":239,"line_end":239,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141441,"byte_end":141449,"line_start":254,"line_end":254,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141774,"byte_end":141782,"line_start":265,"line_end":265,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":142184,"byte_end":142188,"line_start":280,"line_end":280,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":142575,"byte_end":142579,"line_start":294,"line_end":294,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":145567,"byte_end":145581,"line_start":33,"line_end":33,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147196,"byte_end":147202,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147609,"byte_end":147615,"line_start":100,"line_end":100,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":148065,"byte_end":148074,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":148480,"byte_end":148489,"line_start":131,"line_end":131,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":150801,"byte_end":150805,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":151755,"byte_end":151758,"line_start":68,"line_end":68,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":152066,"byte_end":152069,"line_start":78,"line_end":78,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\pareto.rs","byte_start":153425,"byte_end":153431,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\pareto.rs","byte_start":153921,"byte_end":153927,"line_start":38,"line_end":38,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\poisson.rs","byte_start":155537,"byte_end":155544,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\poisson.rs","byte_start":156073,"byte_end":156080,"line_start":48,"line_end":48,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\binomial.rs","byte_start":160606,"byte_end":160614,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\binomial.rs","byte_start":161240,"byte_end":161248,"line_start":49,"line_end":49,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\cauchy.rs","byte_start":171769,"byte_end":171775,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\cauchy.rs","byte_start":172168,"byte_end":172174,"line_start":42,"line_end":42,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175148,"byte_end":175157,"line_start":30,"line_end":30,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175963,"byte_end":175972,"line_start":63,"line_end":63,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178240,"byte_end":178250,"line_start":24,"line_end":24,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178684,"byte_end":178694,"line_start":41,"line_end":41,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weibull.rs","byte_start":180501,"byte_end":180508,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weibull.rs","byte_start":180866,"byte_end":180873,"line_start":35,"line_end":35,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":194755,"byte_end":194763,"line_start":22,"line_end":22,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":194904,"byte_end":194912,"line_start":29,"line_end":29,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":195055,"byte_end":195063,"line_start":36,"line_end":36,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":195199,"byte_end":195207,"line_start":43,"line_end":43,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":195382,"byte_end":195390,"line_start":51,"line_end":51,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":195685,"byte_end":195693,"line_start":61,"line_end":61,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":203641,"byte_end":203649,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":204398,"byte_end":204410,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":205200,"byte_end":205208,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":206389,"byte_end":206397,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":207666,"byte_end":207674,"line_start":158,"line_end":158,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":208018,"byte_end":208026,"line_start":170,"line_end":170,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":32481,"byte_end":32489,"line_start":249,"line_end":249,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":33052,"byte_end":33060,"line_start":267,"line_end":267,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":262331,"byte_end":262338,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":262512,"byte_end":262519,"line_start":60,"line_end":60,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":263283,"byte_end":263292,"line_start":85,"line_end":85,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":263433,"byte_end":263442,"line_start":91,"line_end":91,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":268312,"byte_end":268324,"line_start":83,"line_end":83,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":269148,"byte_end":269160,"line_start":105,"line_end":105,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":269694,"byte_end":269706,"line_start":128,"line_end":128,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":270030,"byte_end":270042,"line_start":139,"line_end":139,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":270328,"byte_end":270341,"line_start":152,"line_end":152,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":271192,"byte_end":271205,"line_start":174,"line_end":174,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":273810,"byte_end":273823,"line_start":249,"line_end":249,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":274259,"byte_end":274272,"line_start":264,"line_end":264,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278262,"byte_end":278272,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278624,"byte_end":278634,"line_start":39,"line_end":39,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278716,"byte_end":278726,"line_start":45,"line_end":45,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":279111,"byte_end":279121,"line_start":63,"line_end":63,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mock.rs","byte_start":280333,"byte_end":280340,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mock.rs","byte_start":280603,"byte_end":280610,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","byte_start":282757,"byte_end":282763,"line_start":39,"line_end":39,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","byte_start":283219,"byte_end":283225,"line_start":61,"line_end":61,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","byte_start":283534,"byte_end":283540,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":288042,"byte_end":288051,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":288149,"byte_end":288158,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":288655,"byte_end":288664,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":317721,"byte_end":317729,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":319473,"byte_end":319481,"line_start":90,"line_end":90,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320041,"byte_end":320049,"line_start":104,"line_end":104,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320161,"byte_end":320169,"line_start":111,"line_end":111,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320462,"byte_end":320474,"line_start":125,"line_end":125,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321008,"byte_end":321020,"line_start":145,"line_end":145,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321236,"byte_end":321252,"line_start":154,"line_end":154,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321777,"byte_end":321793,"line_start":176,"line_end":176,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":305455,"byte_end":305456,"line_start":477,"line_end":477,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":305958,"byte_end":305973,"line_start":493,"line_end":493,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":306425,"byte_end":306440,"line_start":508,"line_end":508,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":12794,"byte_end":12795,"line_start":390,"line_end":390,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":2948,"byte_end":2961,"line_start":98,"line_end":98,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":23}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28636,"byte_end":28643,"line_start":140,"line_end":140,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":59}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":28692,"byte_end":28700,"line_start":142,"line_end":142,"column_start":33,"column_end":41},"ref_id":{"krate":0,"index":139}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":96502,"byte_end":96514,"line_start":19,"line_end":19,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":140}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":2971,"byte_end":2978,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":577}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":2988,"byte_end":2992,"line_start":100,"line_end":100,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":592}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mod.rs","byte_start":259704,"byte_end":259711,"line_start":101,"line_end":101,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":593}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mod.rs","byte_start":259757,"byte_end":259761,"line_start":104,"line_end":104,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":690}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":3002,"byte_end":3005,"line_start":101,"line_end":101,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":747}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":289875,"byte_end":289880,"line_start":28,"line_end":28,"column_start":33,"column_end":38},"ref_id":{"krate":0,"index":748}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":44054,"byte_end":44061,"line_start":167,"line_end":167,"column_start":24,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":44829,"byte_end":44836,"line_start":187,"line_end":187,"column_start":44,"column_end":51},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":943},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":45252,"byte_end":45257,"line_start":200,"line_end":200,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":81}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":45832,"byte_end":45837,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":83}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":48045,"byte_end":48052,"line_start":269,"line_end":269,"column_start":56,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":943},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":48222,"byte_end":48229,"line_start":275,"line_end":275,"column_start":65,"column_end":72},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":943},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":48802,"byte_end":48810,"line_start":292,"line_end":292,"column_start":43,"column_end":51},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":107},"to":{"krate":0,"index":103}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":71426,"byte_end":71434,"line_start":840,"line_end":840,"column_start":24,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":2,"index":34691},"to":{"krate":0,"index":81}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\uniform.rs","byte_start":71500,"byte_end":71515,"line_start":844,"line_end":844,"column_start":25,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1204},"to":{"krate":0,"index":83}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":92041,"byte_end":92050,"line_start":71,"line_end":71,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\bernoulli.rs","byte_start":93721,"byte_end":93730,"line_start":110,"line_end":110,"column_start":29,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1227},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":113003,"byte_end":113016,"line_start":71,"line_end":71,"column_start":17,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":115299,"byte_end":115306,"line_start":133,"line_end":133,"column_start":14,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":168},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":118485,"byte_end":118498,"line_start":229,"line_end":229,"column_start":41,"column_end":54},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":157},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":118872,"byte_end":118885,"line_start":240,"line_end":240,"column_start":32,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":157},"to":{"krate":2,"index":6707}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":119340,"byte_end":119353,"line_start":255,"line_end":255,"column_start":27,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":157},"to":{"krate":2,"index":2002}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":119916,"byte_end":119921,"line_start":273,"line_end":273,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":119928,"byte_end":119932,"line_start":274,"line_end":274,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":1394},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":119939,"byte_end":119952,"line_start":275,"line_end":275,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":81},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":119959,"byte_end":119969,"line_start":276,"line_end":276,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1916},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":119976,"byte_end":119979,"line_start":277,"line_end":277,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1442},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120001,"byte_end":120010,"line_start":278,"line_end":278,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1475},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120017,"byte_end":120020,"line_start":279,"line_end":279,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1447},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120042,"byte_end":120051,"line_start":280,"line_end":280,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1479},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120058,"byte_end":120061,"line_start":281,"line_end":281,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1452},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120083,"byte_end":120092,"line_start":282,"line_end":282,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1483},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120099,"byte_end":120102,"line_start":283,"line_end":283,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1457},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120124,"byte_end":120133,"line_start":284,"line_end":284,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1487},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\alias_method.rs","byte_start":120140,"byte_end":120143,"line_start":285,"line_end":285,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":3354},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":99337,"byte_end":99350,"line_start":91,"line_end":91,"column_start":37,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":104219,"byte_end":104232,"line_start":224,"line_end":224,"column_start":33,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1304},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109574,"byte_end":109587,"line_start":367,"line_end":367,"column_start":6,"column_end":19},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":109982,"byte_end":109995,"line_start":379,"line_end":379,"column_start":30,"column_end":43},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1315},"to":{"krate":1,"index":1537}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weighted\\mod.rs","byte_start":110163,"byte_end":110176,"line_start":388,"line_end":388,"column_start":23,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1315},"to":{"krate":2,"index":6709}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128352,"byte_end":128369,"line_start":26,"line_end":26,"column_start":6,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_sphere.rs","byte_start":128551,"byte_end":128568,"line_start":34,"line_end":34,"column_start":33,"column_end":50},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1333},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131566,"byte_end":131576,"line_start":27,"line_end":27,"column_start":6,"column_end":16},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\unit_circle.rs","byte_start":131737,"byte_end":131747,"line_start":35,"line_end":35,"column_start":33,"column_end":43},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1340},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":136345,"byte_end":136350,"line_start":84,"line_end":84,"column_start":6,"column_end":11},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1347},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":136986,"byte_end":137001,"line_start":105,"line_end":105,"column_start":6,"column_end":21},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":137219,"byte_end":137234,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":137472,"byte_end":137477,"line_start":125,"line_end":125,"column_start":28,"column_end":33},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1347},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":137738,"byte_end":137753,"line_start":134,"line_end":134,"column_start":28,"column_end":43},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1369},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":137955,"byte_end":137970,"line_start":141,"line_end":141,"column_start":28,"column_end":43},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1377},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":139318,"byte_end":139328,"line_start":184,"line_end":184,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":139745,"byte_end":139755,"line_start":197,"line_end":197,"column_start":28,"column_end":38},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1386},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":140575,"byte_end":140582,"line_start":225,"line_end":225,"column_start":6,"column_end":13},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141049,"byte_end":141056,"line_start":239,"line_end":239,"column_start":28,"column_end":35},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1404},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141441,"byte_end":141449,"line_start":254,"line_end":254,"column_start":6,"column_end":14},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":141774,"byte_end":141782,"line_start":265,"line_end":265,"column_start":28,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1413},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":142184,"byte_end":142188,"line_start":280,"line_end":280,"column_start":6,"column_end":10},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\gamma.rs","byte_start":142575,"byte_end":142579,"line_start":294,"line_end":294,"column_start":28,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1421},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":145567,"byte_end":145581,"line_start":33,"line_end":33,"column_start":28,"column_end":42},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1429},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147196,"byte_end":147202,"line_start":84,"line_end":84,"column_start":6,"column_end":12},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":147609,"byte_end":147615,"line_start":100,"line_end":100,"column_start":28,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1436},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":148065,"byte_end":148074,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\normal.rs","byte_start":148480,"byte_end":148489,"line_start":131,"line_end":131,"column_start":28,"column_end":37},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1444},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":150801,"byte_end":150805,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1451},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":151755,"byte_end":151758,"line_start":68,"line_end":68,"column_start":6,"column_end":9},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\exponential.rs","byte_start":152066,"byte_end":152069,"line_start":78,"line_end":78,"column_start":28,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1458},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\pareto.rs","byte_start":153425,"byte_end":153431,"line_start":23,"line_end":23,"column_start":6,"column_end":12},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\pareto.rs","byte_start":153921,"byte_end":153927,"line_start":38,"line_end":38,"column_start":28,"column_end":34},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1465},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\poisson.rs","byte_start":155537,"byte_end":155544,"line_start":32,"line_end":32,"column_start":6,"column_end":13},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1473},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\poisson.rs","byte_start":156073,"byte_end":156080,"line_start":48,"line_end":48,"column_start":28,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1473},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\binomial.rs","byte_start":160606,"byte_end":160614,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\binomial.rs","byte_start":161240,"byte_end":161248,"line_start":49,"line_end":49,"column_start":28,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1484},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\cauchy.rs","byte_start":171769,"byte_end":171775,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\cauchy.rs","byte_start":172168,"byte_end":172174,"line_start":42,"line_end":42,"column_start":28,"column_end":34},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1492},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175148,"byte_end":175157,"line_start":30,"line_end":30,"column_start":6,"column_end":15},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\dirichlet.rs","byte_start":175963,"byte_end":175972,"line_start":63,"line_end":63,"column_start":33,"column_end":42},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1500},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178240,"byte_end":178250,"line_start":24,"line_end":24,"column_start":6,"column_end":16},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\triangular.rs","byte_start":178684,"byte_end":178694,"line_start":41,"line_end":41,"column_start":28,"column_end":38},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1506},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weibull.rs","byte_start":180501,"byte_end":180508,"line_start":23,"line_end":23,"column_start":6,"column_end":13},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\weibull.rs","byte_start":180866,"byte_end":180873,"line_start":35,"line_end":35,"column_start":28,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1515},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":194755,"byte_end":194763,"line_start":22,"line_end":22,"column_start":27,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":194904,"byte_end":194912,"line_start":29,"line_end":29,"column_start":28,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":195055,"byte_end":195063,"line_start":36,"line_end":36,"column_start":28,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":195199,"byte_end":195207,"line_start":43,"line_end":43,"column_start":28,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":195382,"byte_end":195390,"line_start":51,"line_end":51,"column_start":29,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\integer.rs","byte_start":195685,"byte_end":195693,"line_start":61,"line_end":61,"column_start":30,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":203641,"byte_end":203649,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":204398,"byte_end":204410,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1599},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":205200,"byte_end":205208,"line_start":83,"line_end":83,"column_start":29,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":206389,"byte_end":206397,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":207666,"byte_end":207674,"line_start":158,"line_end":158,"column_start":37,"column_end":45},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\other.rs","byte_start":208018,"byte_end":208026,"line_start":170,"line_end":170,"column_start":39,"column_end":47},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":554}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\utils.rs","byte_start":219594,"byte_end":219599,"line_start":251,"line_end":251,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":516}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\utils.rs","byte_start":219806,"byte_end":219811,"line_start":258,"line_end":258,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":520}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\utils.rs","byte_start":220193,"byte_end":220198,"line_start":269,"line_end":269,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":525}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":32481,"byte_end":32489,"line_start":249,"line_end":249,"column_start":28,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1966},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\distributions\\mod.rs","byte_start":33052,"byte_end":33060,"line_start":267,"line_end":267,"column_start":39,"column_end":47},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1966},"to":{"krate":2,"index":3401}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":262331,"byte_end":262338,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1985},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":262512,"byte_end":262519,"line_start":60,"line_end":60,"column_start":27,"column_end":34},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1985},"to":{"krate":12,"index":150}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":263283,"byte_end":263292,"line_start":85,"line_end":85,"column_start":23,"column_end":32},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1991},"to":{"krate":2,"index":6709}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\read.rs","byte_start":263433,"byte_end":263442,"line_start":91,"line_end":91,"column_start":28,"column_end":37},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1991},"to":{"krate":1,"index":1537}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":268312,"byte_end":268324,"line_start":83,"line_end":83,"column_start":15,"column_end":27},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":269148,"byte_end":269160,"line_start":105,"line_end":105,"column_start":36,"column_end":48},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1996},"to":{"krate":12,"index":150}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":269694,"byte_end":269706,"line_start":128,"line_end":128,"column_start":25,"column_end":37},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1996},"to":{"krate":2,"index":2002}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":270030,"byte_end":270042,"line_start":139,"line_end":139,"column_start":29,"column_end":41},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1996},"to":{"krate":12,"index":155}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":270328,"byte_end":270341,"line_start":152,"line_end":152,"column_start":32,"column_end":45},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2005},"to":{"krate":12,"index":60}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":271192,"byte_end":271205,"line_start":174,"line_end":174,"column_start":15,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2005},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":273810,"byte_end":273823,"line_start":249,"line_end":249,"column_start":25,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2005},"to":{"krate":2,"index":2002}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\adapter\\reseeding.rs","byte_start":274259,"byte_end":274272,"line_start":264,"line_end":264,"column_start":29,"column_end":42},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2005},"to":{"krate":12,"index":155}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278262,"byte_end":278272,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2017},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278624,"byte_end":278634,"line_start":39,"line_end":39,"column_start":18,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2017},"to":{"krate":2,"index":2026}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":278716,"byte_end":278726,"line_start":45,"line_end":45,"column_start":18,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2017},"to":{"krate":12,"index":150}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\entropy.rs","byte_start":279111,"byte_end":279121,"line_start":63,"line_end":63,"column_start":20,"column_end":30},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2017},"to":{"krate":12,"index":155}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mock.rs","byte_start":280333,"byte_end":280340,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2021},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\mock.rs","byte_start":280603,"byte_end":280610,"line_start":41,"line_end":41,"column_start":18,"column_end":25},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2021},"to":{"krate":12,"index":150}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","byte_start":282757,"byte_end":282763,"line_start":39,"line_end":39,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2028},"to":{"krate":12,"index":150}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","byte_start":283219,"byte_end":283225,"line_start":61,"line_end":61,"column_start":22,"column_end":28},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2028},"to":{"krate":12,"index":156}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\std.rs","byte_start":283534,"byte_end":283540,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2028},"to":{"krate":12,"index":155}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":288042,"byte_end":288051,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2035},"to":{"krate":2,"index":2026}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":288149,"byte_end":288158,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2035},"to":{"krate":12,"index":150}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\rngs\\thread.rs","byte_start":288655,"byte_end":288664,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2035},"to":{"krate":12,"index":155}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":317721,"byte_end":317729,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":319473,"byte_end":319481,"line_start":90,"line_end":90,"column_start":20,"column_end":28},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2047},"to":{"krate":2,"index":1882}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320041,"byte_end":320049,"line_start":104,"line_end":104,"column_start":25,"column_end":33},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2047},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320161,"byte_end":320169,"line_start":111,"line_end":111,"column_start":27,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2047},"to":{"krate":2,"index":2042}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":320462,"byte_end":320474,"line_start":125,"line_end":125,"column_start":23,"column_end":35},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2058},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321008,"byte_end":321020,"line_start":145,"line_end":145,"column_start":32,"column_end":44},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2058},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321236,"byte_end":321252,"line_start":154,"line_end":154,"column_start":19,"column_end":35},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2069},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":321777,"byte_end":321793,"line_start":176,"line_end":176,"column_start":28,"column_end":44},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2069},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":326855,"byte_end":326859,"line_start":304,"line_end":304,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1394},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":326862,"byte_end":326872,"line_start":304,"line_end":304,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1916},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":326875,"byte_end":326878,"line_start":304,"line_end":304,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1906},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":326881,"byte_end":326890,"line_start":304,"line_end":304,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1882},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":326893,"byte_end":326895,"line_start":304,"line_end":304,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1886},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":326898,"byte_end":326911,"line_start":304,"line_end":304,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":81},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\index.rs","byte_start":326926,"byte_end":326930,"line_start":304,"line_end":304,"column_start":84,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":6364},"to":{"krate":0,"index":804}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":297254,"byte_end":297262,"line_start":241,"line_end":241,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3144},"to":{"krate":0,"index":846}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":297265,"byte_end":297270,"line_start":241,"line_end":241,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":846}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":305455,"byte_end":305456,"line_start":477,"line_end":477,"column_start":28,"column_end":29},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":885},"to":{"krate":0,"index":846}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":305958,"byte_end":305973,"line_start":493,"line_end":493,"column_start":73,"column_end":88},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":3144}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\seq\\mod.rs","byte_start":306425,"byte_end":306440,"line_start":508,"line_end":508,"column_start":9,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2080},"to":{"krate":2,"index":3321}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":4726,"byte_end":4733,"line_start":146,"line_end":146,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":12,"index":150},"to":{"krate":0,"index":912}},{"span":{"file_name":"C:\\Users\\Max\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\rand-0.7.2\\src\\lib.rs","byte_start":12794,"byte_end":12795,"line_start":390,"line_end":390,"column_start":35,"column_end":36},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":932},"to":{"krate":0,"index":912}}]}